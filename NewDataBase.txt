
/*
product (-barecode varchar,name,price,escription,image,qteEnStock);
commandlineBuy(#idSells,#barecode,qteCommande);
commandlineSell(#idAchat,#barecode,qteCommande);
sells(-idSells,#idCommandLine,date);
Buys(-idAchat,#idCommandLine,date);
loggs(-idLog,description);
*/


create table product (
	barecode varchar(50) primary key,
	nameProduct varchar(50), 
	priceProduct float, 
	descriptionProduct varchar(50), 
	imageProduct varbinary(max), 
	qteEnStockProduct float
	)
	
create table sells (
	idSells int identity primary key,
	dateSells datetime
	)

create table Buys (
	idBuys int identity primary key,
	dateBuys datetime
	)

create table commandlineBuy (
	barecode varchar(50) foreign key references product(barecode), 
	idBuys int foreign key references Buys(idBuys),
	qteCommande int, 
	dateBuys datetime,
	constraint primarykeyCommandlinebuy primary key (barecode,idBuys)
	)

create table commandlineSell (
	barecode varchar(50) foreign key references product(barecode), 
	idSells int foreign key references sells(idSells),
	qteCommande int, 
	dateSells datetime,
	constraint primarykeyCommandlineSell primary key (barecode,idSells)
	)


create table loggs (
	 idLog int identity primary key,
	 descriptionLog varchar(100)
	)

go

create trigger triggerForInsertInCommandLineBuy
on commandlineBuy
for insert
as
begin
	/*insert into loggs*/
	declare @barecode varchar(50)
	declare @qteCommande int
	declare @idBuys int
	declare @dateBuys datetime

	select @barecode = barecode ,
		   @qteCommande = qteCommande,
		   @idBuys = idBuys ,	
	       @dateBuys = dateBuys
	from inserted	

	declare @string varchar(100)
	set @string ='(INSERT)' +'barecode : '+cast(@barecode as varchar(20))+'qteCommande: '
				+cast(@qteCommande as varchar(20))+'idBuys'+cast(@idBuys as varchar(20))
				+'dateBuys: '+cast(@dateBuys as varchar(20))
	insert into loggs(descriptionLog) values (@string)
	/*update stock */
	declare @qte int
	select @qte = p.qteEnStockProduct from product p where p.barecode = @barecode
	set @qte=@qte+@qteCommande
	update product set product.qteEnStockProduct = @qte
end


go

create trigger triggerForInsertInCommandlineSell
on commandlineSell
for insert
as
begin
	/*insert into loggs*/
	declare @barecode varchar(50)
	declare @qteCommande int
	declare @idSells int
	declare @dateSells datetime

	select @barecode = barecode, 	
	   	   @qteCommande = qteCommande,
	 	   @idSells = idSells,
		   @dateSells = dateSells
	from inserted	

	declare @string varchar(100)
	set @string ='(INSERT)'+'barecode : '+cast(@barecode as varchar(20))+'qteCommande: '
	            +cast(@qteCommande as varchar(20))+'idAchat'+cast(@idSells as varchar(20))
				+'dateSells: '+cast(@dateSells as varchar(20))

	insert into loggs(descriptionLog) values (@string)

	/*update stock */
	declare @qte int
	select @qte = p.qteEnStockProduct from product p where p.barecode = @barecode
	set @qte=@qte-@qteCommande
	if @qte<0
	begin
		RAISERROR ('RESSOURCES NEEDED!!', 16, 1)
		ROLLBACK
	end
	else
	begin
		update product set product.qteEnStockProduct = @qte
	end
end

go

create trigger triggerForUpdateCommandlineBuy
on commandlineBuy
for update
as
begin
	/*insert into loggs*/
	declare @barecode varchar(50)
	declare @qteCommande int
	declare @idBuys int
	declare @dateBuys datetime
	declare @oldQte int

	select @barecode = barecode ,
		   @qteCommande = qteCommande,
		   @idBuys = idBuys ,	
	       @dateBuys = dateBuys
	from inserted	

	select @oldQte=qteCommande	from deleted

	declare @string varchar(100)

	set @string ='(UPDATE) '+'barecode : '+cast(@barecode as varchar(20))+'@Old qte commande: '
				+cast(@oldQte as varchar(20))+'idBuys'+cast(@idBuys as varchar(20))
				+'dateBuys: '+cast(@dateBuys as varchar(20))+'new qte commande :'
				+cast(@qteCommande as varchar(20))

	insert into loggs(descriptionLog) values (@string)
	/*update stock */
	declare @qte int
	select @qte = p.qteEnStockProduct from product p where p.barecode = @barecode
	set @qte=@qte-@oldQte+@qteCommande
	update product set product.qteEnStockProduct = @qte
end
go

create trigger triggerForUpdateCommandlineSell
on commandlineSell
for update
as
begin
/*insert into loggs*/
	declare @barecode varchar(50)
	declare @qteCommande int
	declare @idSells int
	declare @dateSells datetime
	declare @oldQte int

	select @barecode = barecode, 	
	   	   @qteCommande = qteCommande,
	 	   @idSells = idSells,
		   @dateSells = dateSells
	from inserted	

	select @oldQte=qteCommande	from deleted

	declare @string varchar(100)

	set @string ='(update) '+'barecode : '+cast(@barecode as varchar(20))+'new qte commande: '
	            +cast(@qteCommande as varchar(20))+'idAchat'+cast(@idSells as varchar(20))
				+'dateSells: '+cast(@dateSells as varchar(20))+'old qte commande :'
				+cast(@oldQte as varchar(20))

	insert into loggs(descriptionLog) values (@string)

	/*update stock */
	declare @qte int
	select @qte = p.qteEnStockProduct from product p where p.barecode = @barecode
	set @qte=@qte+@oldQte-@qteCommande
	if @qte<0
	begin
		RAISERROR ('RESSOURCES NEEDED!!', 16, 1)
		ROLLBACK
	end
	else
	begin
		update product set product.qteEnStockProduct = @qte
	end
end
go

create trigger triggerForDeleteCommandLineBuy
on commandlineBuy
for delete
as
begin
	/*insert into loggs*/
	declare @barecode varchar(50)
	declare @qteCommande int
	declare @idBuys int
	declare @dateBuys datetime

	select @barecode = barecode ,
		   @qteCommande = qteCommande,
		   @idBuys = idBuys ,	
	       @dateBuys = dateBuys
	from deleted	

	declare @string varchar(100)
	set @string ='(DELETE)'+ 'barecode : '+cast(@barecode as varchar(20))+'qteCommande: '
				+cast(@qteCommande as varchar(20))+'idBuys'+cast(@idBuys as varchar(20))
				+'dateBuys: '+cast(@dateBuys as varchar(20))
	insert into loggs(descriptionLog) values (@string)
	/*update stock */
	declare @qte int
	select @qte = p.qteEnStockProduct from product p where p.barecode = @barecode
	set @qte=@qte-@qteCommande
	update product set product.qteEnStockProduct = @qte

	/*delete a buy if it have just this one commandline*/
	declare @n int
	select @n=count(*) from commandlineBuy where commandlineBuy.idBuys=@idBuys

	if(@n=0)
	begin
		delete from Buys where Buys.idBuys=@idBuys
	end
end
go

create trigger triggerForDeleteCommandlineSell
on commandlineSell
for delete
as
begin
	/*insert into loggs*/
	declare @barecode varchar(50)
	declare @qteCommande int
	declare @idSells int
	declare @dateSells datetime

	select @barecode = barecode, 	
	   	   @qteCommande = qteCommande,
	 	   @idSells = idSells,
		   @dateSells = dateSells
	from deleted	

	declare @string varchar(100)
	set @string ='(DELETE)''barecode : '+cast(@barecode as varchar(20))+'qteCommande: '
	            +cast(@qteCommande as varchar(20))+'idAchat'+cast(@idSells as varchar(20))
				+'dateSells: '+cast(@dateSells as varchar(20))

	insert into loggs(descriptionLog) values (@string)

	/*update stock */
	declare @qte int
	select @qte = p.qteEnStockProduct from product p where p.barecode = @barecode
	set @qte=@qte+@qteCommande
	update product set product.qteEnStockProduct = @qte

	
	/*delete a sell if it have just this one commandline*/
	declare @n int
	select @n=count(*) from commandlineSell where commandlineSell.idSells=@idSells

	if(@n=0)
	begin
		delete from sells where sells.idSells=@idSells
	end

end

go



create trigger InsertIntoTheCommandLineAndBuyLoggic
on commandlineBuy
instead of Insert
as
begin
	DECLARE @barecode varchar(50),
	@idBuys int,
	@qteCommande int, 
	@dateBuys datetime

	SELECT @barecode = inserted.barecode, @idBuys =inserted.idBuys, 
		   @qteCommande=inserted.qteCommande,  @dateBuys =inserted.dateBuys
	from inserted

	declare @var int
	select @var=count(*) from Buys where Buys.idBuys=@idBuys
	if(@var=0)
	begin
		insert into Buys values (@idBuys,@dateBuys)
		insert into commandlineBuy values(@barecode,@idBuys,@qteCommande,@dateBuys)
	end
	if(@var=1)
	begin
		insert into commandlineBuy values(@barecode,@idBuys,@qteCommande,@dateBuys)
	end
end
go


create trigger DeleteBuyLoggic
on Buys
instead of delete
as
begin
	declare @deletedId int
	select @deletedId=deleted.idBuys from deleted
	delete from commandlineBuy where commandlineBuy.idBuys=@deletedId
	delete from Buys where Buys.idBuys=@deletedId
end
go

create trigger InsertIntoTheCommandLineAndSellLoggic
on commandlineSell
instead of Insert
as
begin
	DECLARE @barecode varchar(50),
	@idSells int,
	@qteCommande int, 
	@dateSells datetime

	SELECT @barecode = inserted.barecode, @idSells =inserted.idSells, 
		   @qteCommande=inserted.qteCommande,  @dateSells =inserted.dateSells
	from inserted

	declare @var int
	select @var=count(*) from sells where sells.idSells = @idSells
	if(@var=0)
	begin
		insert into sells values (@idSells,@dateSells)
		insert into commandlineSell values(@barecode,@idSells,@qteCommande,@dateSells)
	end
	if(@var=1)
	begin
		insert into commandlineSell values(@barecode,@idSells,@qteCommande,@dateSells)
	end
end
go

create trigger DeleteBuyLoggic
on Sells
instead of delete
as
begin
	declare @deletedId int
	select @deletedId=deleted.idSells from deleted
	delete from commandlineSell where commandlineSell.idSells=@deletedId
	delete from sells where sells.idSells=@deletedId
end
go